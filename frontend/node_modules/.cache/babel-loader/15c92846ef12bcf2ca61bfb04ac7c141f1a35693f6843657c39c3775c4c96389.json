{"ast":null,"code":"'use strict';\n\nvar iconv = require('iconv-lite');\n\n/**\n * Character set encoding and decoding functions\n */\nvar charset = module.exports = {\n  /**\n   * Encodes an unicode string into an Buffer object as UTF-8\n   *\n   * We force UTF-8 here, no strange encodings allowed.\n   *\n   * @param {String} str String to be encoded\n   * @return {Buffer} UTF-8 encoded typed array\n   */\n  encode: function (str) {\n    return new Buffer(str, 'utf-8');\n  },\n  /**\n   * Decodes a string from Buffer to an unicode string using specified encoding\n   *\n   * @param {Buffer} buf Binary data to be decoded\n   * @param {String} [fromCharset='UTF-8'] Binary data is decoded into string using this charset\n   * @return {String} Decded string\n   */\n  decode: function (buf, fromCharset) {\n    fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n    if (/^(us\\-)?ascii|utf\\-8|7bit$/i.test(fromCharset)) {\n      return buf.toString('utf-8');\n    }\n    return iconv.decode(buf, fromCharset);\n  },\n  /**\n   * Convert a string from specific encoding to UTF-8 Buffer\n   *\n   * @param {String|Buffer} str String to be encoded\n   * @param {String} [fromCharset='UTF-8'] Source encoding for the string\n   * @return {Buffer} UTF-8 encoded typed array\n   */\n  convert: function (data, fromCharset) {\n    fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n    var bufString;\n    if (typeof data !== 'string') {\n      if (/^(us\\-)?ascii|utf\\-8|7bit$/i.test(fromCharset)) {\n        return data;\n      }\n      bufString = charset.decode(data, fromCharset);\n      return charset.encode(bufString);\n    }\n    return charset.encode(data);\n  },\n  /**\n   * Converts well known invalid character set names to proper names.\n   * eg. win-1257 will be converted to WINDOWS-1257\n   *\n   * @param {String} charset Charset name to convert\n   * @return {String} Canoninicalized charset name\n   */\n  normalizeCharset: function (charset) {\n    var match;\n    if (match = charset.match(/^utf[\\-_]?(\\d+)$/i)) {\n      return 'UTF-' + match[1];\n    }\n    if (match = charset.match(/^win(?:dows)?[\\-_]?(\\d+)$/i)) {\n      return 'WINDOWS-' + match[1];\n    }\n    if (match = charset.match(/^latin[\\-_]?(\\d+)$/i)) {\n      return 'ISO-8859-' + match[1];\n    }\n    return charset;\n  }\n};","map":{"version":3,"names":["iconv","require","charset","module","exports","encode","str","Buffer","decode","buf","fromCharset","normalizeCharset","test","toString","convert","data","bufString","match"],"sources":["C:/Users/Admin/OneDrive/Desktop/Online Book Thrift Store/frontend/node_modules/libmime/lib/charset.js"],"sourcesContent":["'use strict';\n\nvar iconv = require('iconv-lite');\n\n/**\n * Character set encoding and decoding functions\n */\nvar charset = module.exports = {\n\n    /**\n     * Encodes an unicode string into an Buffer object as UTF-8\n     *\n     * We force UTF-8 here, no strange encodings allowed.\n     *\n     * @param {String} str String to be encoded\n     * @return {Buffer} UTF-8 encoded typed array\n     */\n    encode: function (str) {\n        return new Buffer(str, 'utf-8');\n    },\n\n    /**\n     * Decodes a string from Buffer to an unicode string using specified encoding\n     *\n     * @param {Buffer} buf Binary data to be decoded\n     * @param {String} [fromCharset='UTF-8'] Binary data is decoded into string using this charset\n     * @return {String} Decded string\n     */\n    decode: function (buf, fromCharset) {\n        fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n\n        if (/^(us\\-)?ascii|utf\\-8|7bit$/i.test(fromCharset)) {\n            return buf.toString('utf-8');\n        }\n\n        return iconv.decode(buf, fromCharset);\n    },\n\n    /**\n     * Convert a string from specific encoding to UTF-8 Buffer\n     *\n     * @param {String|Buffer} str String to be encoded\n     * @param {String} [fromCharset='UTF-8'] Source encoding for the string\n     * @return {Buffer} UTF-8 encoded typed array\n     */\n    convert: function (data, fromCharset) {\n        fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n\n        var bufString;\n\n        if (typeof data !== 'string') {\n            if (/^(us\\-)?ascii|utf\\-8|7bit$/i.test(fromCharset)) {\n                return data;\n            }\n            bufString = charset.decode(data, fromCharset);\n            return charset.encode(bufString);\n        }\n        return charset.encode(data);\n    },\n\n    /**\n     * Converts well known invalid character set names to proper names.\n     * eg. win-1257 will be converted to WINDOWS-1257\n     *\n     * @param {String} charset Charset name to convert\n     * @return {String} Canoninicalized charset name\n     */\n    normalizeCharset: function (charset) {\n        var match;\n\n        if ((match = charset.match(/^utf[\\-_]?(\\d+)$/i))) {\n            return 'UTF-' + match[1];\n        }\n\n        if ((match = charset.match(/^win(?:dows)?[\\-_]?(\\d+)$/i))) {\n            return 'WINDOWS-' + match[1];\n        }\n\n        if ((match = charset.match(/^latin[\\-_]?(\\d+)$/i))) {\n            return 'ISO-8859-' + match[1];\n        }\n\n        return charset;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEjC;AACA;AACA;AACA,IAAIC,OAAO,GAAGC,MAAM,CAACC,OAAO,GAAG;EAE3B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAM,EAAE,SAAAA,CAAUC,GAAG,EAAE;IACnB,OAAO,IAAIC,MAAM,CAACD,GAAG,EAAE,OAAO,CAAC;EACnC,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,MAAM,EAAE,SAAAA,CAAUC,GAAG,EAAEC,WAAW,EAAE;IAChCA,WAAW,GAAGR,OAAO,CAACS,gBAAgB,CAACD,WAAW,IAAI,OAAO,CAAC;IAE9D,IAAI,6BAA6B,CAACE,IAAI,CAACF,WAAW,CAAC,EAAE;MACjD,OAAOD,GAAG,CAACI,QAAQ,CAAC,OAAO,CAAC;IAChC;IAEA,OAAOb,KAAK,CAACQ,MAAM,CAACC,GAAG,EAAEC,WAAW,CAAC;EACzC,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,OAAO,EAAE,SAAAA,CAAUC,IAAI,EAAEL,WAAW,EAAE;IAClCA,WAAW,GAAGR,OAAO,CAACS,gBAAgB,CAACD,WAAW,IAAI,OAAO,CAAC;IAE9D,IAAIM,SAAS;IAEb,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC1B,IAAI,6BAA6B,CAACH,IAAI,CAACF,WAAW,CAAC,EAAE;QACjD,OAAOK,IAAI;MACf;MACAC,SAAS,GAAGd,OAAO,CAACM,MAAM,CAACO,IAAI,EAAEL,WAAW,CAAC;MAC7C,OAAOR,OAAO,CAACG,MAAM,CAACW,SAAS,CAAC;IACpC;IACA,OAAOd,OAAO,CAACG,MAAM,CAACU,IAAI,CAAC;EAC/B,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIJ,gBAAgB,EAAE,SAAAA,CAAUT,OAAO,EAAE;IACjC,IAAIe,KAAK;IAET,IAAKA,KAAK,GAAGf,OAAO,CAACe,KAAK,CAAC,mBAAmB,CAAC,EAAG;MAC9C,OAAO,MAAM,GAAGA,KAAK,CAAC,CAAC,CAAC;IAC5B;IAEA,IAAKA,KAAK,GAAGf,OAAO,CAACe,KAAK,CAAC,4BAA4B,CAAC,EAAG;MACvD,OAAO,UAAU,GAAGA,KAAK,CAAC,CAAC,CAAC;IAChC;IAEA,IAAKA,KAAK,GAAGf,OAAO,CAACe,KAAK,CAAC,qBAAqB,CAAC,EAAG;MAChD,OAAO,WAAW,GAAGA,KAAK,CAAC,CAAC,CAAC;IACjC;IAEA,OAAOf,OAAO;EAClB;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}