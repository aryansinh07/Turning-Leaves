{"ast":null,"code":"'use strict';\n\nvar stream = require('stream');\nvar util = require('util');\nvar Transform = stream.Transform;\n\n// expose to the world\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  wrap: wrap,\n  Encoder: Encoder,\n  Decoder: Decoder\n};\n\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\nfunction encode(buffer) {\n  if (typeof buffer === 'string') {\n    buffer = new Buffer(buffer, 'utf-8');\n  }\n  return buffer.toString('base64');\n}\n\n/**\n * Decodes a base64 encoded string to a Buffer object\n *\n * @param {String} str base64 encoded string\n * @returns {Buffer} Decoded value\n */\nfunction decode(str) {\n  str = str || '';\n  return new Buffer(str, 'base64');\n}\n\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\nfunction wrap(str, lineLength) {\n  str = (str || '').toString();\n  lineLength = lineLength || 76;\n  if (str.length <= lineLength) {\n    return str;\n  }\n  return str.replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n').trim();\n}\n\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum lenght for lines, set to false to disable wrapping\n */\nfunction Encoder(options) {\n  // init Transform\n  this.options = options || {};\n  if (this.options.lineLength !== false) {\n    this.options.lineLength = this.options.lineLength || 76;\n  }\n  this._curLine = '';\n  this._remainingBytes = false;\n  this.inputBytes = 0;\n  this.outputBytes = 0;\n  Transform.call(this, this.options);\n}\nutil.inherits(Encoder, Transform);\nEncoder.prototype._transform = function (chunk, encoding, done) {\n  var b64,\n    _self = this;\n  if (encoding !== 'buffer') {\n    chunk = new Buffer(chunk, encoding);\n  }\n  if (!chunk || !chunk.length) {\n    return done();\n  }\n  this.inputBytes += chunk.length;\n  if (this._remainingBytes && this._remainingBytes.length) {\n    chunk = Buffer.concat([this._remainingBytes, chunk]);\n    this._remainingBytes = false;\n  }\n  if (chunk.length % 3) {\n    this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);\n    chunk = chunk.slice(0, chunk.length - chunk.length % 3);\n  } else {\n    this._remainingBytes = false;\n  }\n  b64 = this._curLine + encode(chunk);\n  if (this.options.lineLength) {\n    b64 = wrap(b64, this.options.lineLength);\n    b64 = b64.replace(/(^|\\n)([^\\n]*)$/, function (match, lineBreak, lastLine) {\n      _self._curLine = lastLine;\n      return lineBreak;\n    });\n  }\n  if (b64) {\n    this.outputBytes += b64.length;\n    this.push(b64);\n  }\n  done();\n};\nEncoder.prototype._flush = function (done) {\n  if (this._remainingBytes && this._remainingBytes.length) {\n    this._curLine += encode(this._remainingBytes);\n  }\n  if (this._curLine) {\n    this._curLine = wrap(this._curLine, this.options.lineLength);\n    this.outputBytes += this._curLine.length;\n    this.push(this._curLine, 'ascii');\n    this._curLine = '';\n  }\n  done();\n};\n\n/**\n * Creates a transform stream for decoding base64 encoded strings\n *\n * @constructor\n * @param {Object} options Stream options\n */\nfunction Decoder(options) {\n  // init Transform\n  this.options = options || {};\n  this._curLine = '';\n  this.inputBytes = 0;\n  this.outputBytes = 0;\n  Transform.call(this, this.options);\n}\nutil.inherits(Decoder, Transform);\nDecoder.prototype._transform = function (chunk, encoding, done) {\n  var b64, buf;\n  chunk = chunk.toString('ascii');\n  if (!chunk || !chunk.length) {\n    return done();\n  }\n  this.inputBytes += chunk.length;\n  b64 = this._curLine + chunk;\n  this._curLine = '';\n  b64 = b64.replace(/[^a-zA-Z0-9+\\/=]/g, '');\n  if (b64.length % 4) {\n    this._curLine = b64.substr(-b64.length % 4);\n    if (this._curLine.length == b64.length) {\n      b64 = '';\n    } else {\n      b64 = b64.substr(0, this._curLine.length);\n    }\n  }\n  if (b64) {\n    buf = decode(b64);\n    this.outputBytes += buf.length;\n    this.push(buf);\n  }\n  done();\n};\nDecoder.prototype._flush = function (done) {\n  var b64, buf;\n  if (this._curLine) {\n    buf = decode(this._curLine);\n    this.outputBytes += buf.length;\n    this.push(buf);\n    this._curLine = '';\n  }\n  done();\n};","map":{"version":3,"names":["stream","require","util","Transform","module","exports","encode","decode","wrap","Encoder","Decoder","buffer","Buffer","toString","str","lineLength","length","replace","RegExp","trim","options","_curLine","_remainingBytes","inputBytes","outputBytes","call","inherits","prototype","_transform","chunk","encoding","done","b64","_self","concat","slice","match","lineBreak","lastLine","push","_flush","buf","substr"],"sources":["C:/Users/Admin/OneDrive/Desktop/Online Book Thrift Store/frontend/node_modules/libbase64/lib/libbase64.js"],"sourcesContent":["'use strict';\n\nvar stream = require('stream');\nvar util = require('util');\nvar Transform = stream.Transform;\n\n// expose to the world\nmodule.exports = {\n    encode: encode,\n    decode: decode,\n    wrap: wrap,\n    Encoder: Encoder,\n    Decoder: Decoder\n};\n\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\nfunction encode(buffer) {\n    if (typeof buffer === 'string') {\n        buffer = new Buffer(buffer, 'utf-8');\n    }\n\n    return buffer.toString('base64');\n}\n\n/**\n * Decodes a base64 encoded string to a Buffer object\n *\n * @param {String} str base64 encoded string\n * @returns {Buffer} Decoded value\n */\nfunction decode(str) {\n    str = (str || '');\n    return new Buffer(str, 'base64');\n}\n\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\nfunction wrap(str, lineLength) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    if (str.length <= lineLength) {\n        return str;\n    }\n\n    return str.replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n').trim();\n}\n\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum lenght for lines, set to false to disable wrapping\n */\nfunction Encoder(options) {\n    // init Transform\n    this.options = options || {};\n\n    if (this.options.lineLength !== false) {\n        this.options.lineLength = this.options.lineLength || 76;\n    }\n\n    this._curLine = '';\n    this._remainingBytes = false;\n\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n\n    Transform.call(this, this.options);\n}\nutil.inherits(Encoder, Transform);\n\nEncoder.prototype._transform = function(chunk, encoding, done) {\n    var b64, _self = this;\n\n    if (encoding !== 'buffer') {\n        chunk = new Buffer(chunk, encoding);\n    }\n\n    if (!chunk || !chunk.length) {\n        return done();\n    }\n\n    this.inputBytes += chunk.length;\n\n    if (this._remainingBytes && this._remainingBytes.length) {\n        chunk = Buffer.concat([this._remainingBytes, chunk]);\n        this._remainingBytes = false;\n    }\n\n    if (chunk.length % 3) {\n        this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);\n        chunk = chunk.slice(0, chunk.length - chunk.length % 3);\n    } else {\n        this._remainingBytes = false;\n    }\n\n    b64 = this._curLine + encode(chunk);\n\n    if (this.options.lineLength) {\n        b64 = wrap(b64, this.options.lineLength);\n        b64 = b64.replace(/(^|\\n)([^\\n]*)$/, function(match, lineBreak, lastLine) {\n            _self._curLine = lastLine;\n            return lineBreak;\n        });\n    }\n\n    if (b64) {\n        this.outputBytes += b64.length;\n        this.push(b64);\n    }\n\n    done();\n};\n\nEncoder.prototype._flush = function(done) {\n    if (this._remainingBytes && this._remainingBytes.length) {\n        this._curLine += encode(this._remainingBytes);\n    }\n    if (this._curLine) {\n        this._curLine = wrap(this._curLine, this.options.lineLength);\n        this.outputBytes += this._curLine.length;\n        this.push(this._curLine, 'ascii');\n        this._curLine = '';\n    }\n    done();\n};\n\n/**\n * Creates a transform stream for decoding base64 encoded strings\n *\n * @constructor\n * @param {Object} options Stream options\n */\nfunction Decoder(options) {\n    // init Transform\n    this.options = options || {};\n    this._curLine = '';\n\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n\n    Transform.call(this, this.options);\n}\nutil.inherits(Decoder, Transform);\n\nDecoder.prototype._transform = function(chunk, encoding, done) {\n    var b64, buf;\n\n    chunk = chunk.toString('ascii');\n\n    if (!chunk || !chunk.length) {\n        return done();\n    }\n\n    this.inputBytes += chunk.length;\n\n    b64 = (this._curLine + chunk);\n    this._curLine = '';\n\n    b64 = b64.replace(/[^a-zA-Z0-9+\\/=]/g, '');\n\n    if (b64.length % 4) {\n        this._curLine = b64.substr(-b64.length % 4);\n        if (this._curLine.length == b64.length) {\n            b64 = '';\n        } else {\n            b64 = b64.substr(0, this._curLine.length);\n        }\n    }\n\n    if (b64) {\n        buf = decode(b64);\n        this.outputBytes += buf.length;\n        this.push(buf);\n    }\n\n    done();\n};\n\nDecoder.prototype._flush = function(done) {\n    var b64, buf;\n    if (this._curLine) {\n        buf = decode(this._curLine);\n        this.outputBytes += buf.length;\n        this.push(buf);\n        this._curLine = '';\n    }\n    done();\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}