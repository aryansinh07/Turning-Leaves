{"ast":null,"code":"'use strict';\n\n// expose to the world\nmodule.exports = addressparser;\n\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */\nfunction addressparser(str) {\n  var tokenizer = new Tokenizer(str);\n  var tokens = tokenizer.tokenize();\n  var addresses = [];\n  var address = [];\n  var parsedAddresses = [];\n  tokens.forEach(function (token) {\n    if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n      if (address.length) {\n        addresses.push(address);\n      }\n      address = [];\n    } else {\n      address.push(token);\n    }\n  });\n  if (address.length) {\n    addresses.push(address);\n  }\n  addresses.forEach(function (address) {\n    address = _handleAddress(address);\n    if (address.length) {\n      parsedAddresses = parsedAddresses.concat(address);\n    }\n  });\n  return parsedAddresses;\n}\n\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */\nfunction _handleAddress(tokens) {\n  var token;\n  var isGroup = false;\n  var state = 'text';\n  var address;\n  var addresses = [];\n  var data = {\n    address: [],\n    comment: [],\n    group: [],\n    text: []\n  };\n  var i;\n  var len;\n\n  // Filter out <addresses>, (comments) and regular text\n  for (i = 0, len = tokens.length; i < len; i++) {\n    token = tokens[i];\n    if (token.type === 'operator') {\n      switch (token.value) {\n        case '<':\n          state = 'address';\n          break;\n        case '(':\n          state = 'comment';\n          break;\n        case ':':\n          state = 'group';\n          isGroup = true;\n          break;\n        default:\n          state = 'text';\n      }\n    } else if (token.value) {\n      if (state === 'address') {\n        // handle use case where unquoted name includes a \"<\"\n        // Apple Mail truncates everything between an unexpected < and an address\n        // and so will we\n        token.value = token.value.replace(/^[^<]*<\\s*/, '');\n      }\n      data[state].push(token.value);\n    }\n  }\n\n  // If there is no text but a comment, replace the two\n  if (!data.text.length && data.comment.length) {\n    data.text = data.comment;\n    data.comment = [];\n  }\n  if (isGroup) {\n    // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n    data.text = data.text.join(' ');\n    addresses.push({\n      name: data.text || address && address.name,\n      group: data.group.length ? addressparser(data.group.join(',')) : []\n    });\n  } else {\n    // If no address was found, try to detect one from regular text\n    if (!data.address.length && data.text.length) {\n      for (i = data.text.length - 1; i >= 0; i--) {\n        if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n          data.address = data.text.splice(i, 1);\n          break;\n        }\n      }\n      var _regexHandler = function (address) {\n        if (!data.address.length) {\n          data.address = [address.trim()];\n          return ' ';\n        } else {\n          return address;\n        }\n      };\n\n      // still no address\n      if (!data.address.length) {\n        for (i = data.text.length - 1; i >= 0; i--) {\n          // fixed the regex to parse email address correctly when email address has more than one @\n          data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n          if (data.address.length) {\n            break;\n          }\n        }\n      }\n    }\n\n    // If there's still is no text but a comment exixts, replace the two\n    if (!data.text.length && data.comment.length) {\n      data.text = data.comment;\n      data.comment = [];\n    }\n\n    // Keep only the first address occurence, push others to regular text\n    if (data.address.length > 1) {\n      data.text = data.text.concat(data.address.splice(1));\n    }\n\n    // Join values with spaces\n    data.text = data.text.join(' ');\n    data.address = data.address.join(' ');\n    if (!data.address && isGroup) {\n      return [];\n    } else {\n      address = {\n        address: data.address || data.text || '',\n        name: data.text || data.address || ''\n      };\n      if (address.address === address.name) {\n        if ((address.address || '').match(/@/)) {\n          address.name = '';\n        } else {\n          address.address = '';\n        }\n      }\n      addresses.push(address);\n    }\n  }\n  return addresses;\n}\n\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */\nfunction Tokenizer(str) {\n  this.str = (str || '').toString();\n  this.operatorCurrent = '';\n  this.operatorExpecting = '';\n  this.node = null;\n  this.escaped = false;\n  this.list = [];\n}\n\n/**\n * Operator tokens and which tokens are expected to end the sequence\n */\nTokenizer.prototype.operators = {\n  '\"': '\"',\n  '(': ')',\n  '<': '>',\n  ',': '',\n  ':': ';',\n  // Semicolons are not a legal delimiter per the RFC2822 grammar other\n  // than for terminating a group, but they are also not valid for any\n  // other use in this context.  Given that some mail clients have\n  // historically allowed the semicolon as a delimiter equivalent to the\n  // comma in their UI, it makes sense to treat them the same as a comma\n  // when used outside of a group.\n  ';': ''\n};\n\n/**\n * Tokenizes the original input string\n *\n * @return {Array} An array of operator|text tokens\n */\nTokenizer.prototype.tokenize = function () {\n  var chr,\n    list = [];\n  for (var i = 0, len = this.str.length; i < len; i++) {\n    chr = this.str.charAt(i);\n    this.checkChar(chr);\n  }\n  this.list.forEach(function (node) {\n    node.value = (node.value || '').toString().trim();\n    if (node.value) {\n      list.push(node);\n    }\n  });\n  return list;\n};\n\n/**\n * Checks if a character is an operator or text and acts accordingly\n *\n * @param {String} chr Character from the address field\n */\nTokenizer.prototype.checkChar = function (chr) {\n  if ((chr in this.operators || chr === '\\\\') && this.escaped) {\n    this.escaped = false;\n  } else if (this.operatorExpecting && chr === this.operatorExpecting) {\n    this.node = {\n      type: 'operator',\n      value: chr\n    };\n    this.list.push(this.node);\n    this.node = null;\n    this.operatorExpecting = '';\n    this.escaped = false;\n    return;\n  } else if (!this.operatorExpecting && chr in this.operators) {\n    this.node = {\n      type: 'operator',\n      value: chr\n    };\n    this.list.push(this.node);\n    this.node = null;\n    this.operatorExpecting = this.operators[chr];\n    this.escaped = false;\n    return;\n  }\n  if (!this.escaped && chr === '\\\\') {\n    this.escaped = true;\n    return;\n  }\n  if (!this.node) {\n    this.node = {\n      type: 'text',\n      value: ''\n    };\n    this.list.push(this.node);\n  }\n  if (this.escaped && chr !== '\\\\') {\n    this.node.value += '\\\\';\n  }\n  this.node.value += chr;\n  this.escaped = false;\n};","map":{"version":3,"names":["module","exports","addressparser","str","tokenizer","Tokenizer","tokens","tokenize","addresses","address","parsedAddresses","forEach","token","type","value","length","push","_handleAddress","concat","isGroup","state","data","comment","group","text","i","len","replace","join","name","match","splice","_regexHandler","trim","toString","operatorCurrent","operatorExpecting","node","escaped","list","prototype","operators","chr","charAt","checkChar"],"sources":["C:/Users/Admin/OneDrive/Desktop/Online Book Thrift Store/frontend/node_modules/addressparser/lib/addressparser.js"],"sourcesContent":["'use strict';\n\n// expose to the world\nmodule.exports = addressparser;\n\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */\nfunction addressparser(str) {\n    var tokenizer = new Tokenizer(str);\n    var tokens = tokenizer.tokenize();\n\n    var addresses = [];\n    var address = [];\n    var parsedAddresses = [];\n\n    tokens.forEach(function (token) {\n        if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n            if (address.length) {\n                addresses.push(address);\n            }\n            address = [];\n        } else {\n            address.push(token);\n        }\n    });\n\n    if (address.length) {\n        addresses.push(address);\n    }\n\n    addresses.forEach(function (address) {\n        address = _handleAddress(address);\n        if (address.length) {\n            parsedAddresses = parsedAddresses.concat(address);\n        }\n    });\n\n    return parsedAddresses;\n}\n\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */\nfunction _handleAddress(tokens) {\n    var token;\n    var isGroup = false;\n    var state = 'text';\n    var address;\n    var addresses = [];\n    var data = {\n        address: [],\n        comment: [],\n        group: [],\n        text: []\n    };\n    var i;\n    var len;\n\n    // Filter out <addresses>, (comments) and regular text\n    for (i = 0, len = tokens.length; i < len; i++) {\n        token = tokens[i];\n        if (token.type === 'operator') {\n            switch (token.value) {\n                case '<':\n                    state = 'address';\n                    break;\n                case '(':\n                    state = 'comment';\n                    break;\n                case ':':\n                    state = 'group';\n                    isGroup = true;\n                    break;\n                default:\n                    state = 'text';\n            }\n        } else if (token.value) {\n            if (state === 'address') {\n                // handle use case where unquoted name includes a \"<\"\n                // Apple Mail truncates everything between an unexpected < and an address\n                // and so will we\n                token.value = token.value.replace(/^[^<]*<\\s*/, '');\n            }\n            data[state].push(token.value);\n        }\n    }\n\n    // If there is no text but a comment, replace the two\n    if (!data.text.length && data.comment.length) {\n        data.text = data.comment;\n        data.comment = [];\n    }\n\n    if (isGroup) {\n        // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n        data.text = data.text.join(' ');\n        addresses.push({\n            name: data.text || (address && address.name),\n            group: data.group.length ? addressparser(data.group.join(',')) : []\n        });\n    } else {\n        // If no address was found, try to detect one from regular text\n        if (!data.address.length && data.text.length) {\n            for (i = data.text.length - 1; i >= 0; i--) {\n                if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n                    data.address = data.text.splice(i, 1);\n                    break;\n                }\n            }\n\n            var _regexHandler = function (address) {\n                if (!data.address.length) {\n                    data.address = [address.trim()];\n                    return ' ';\n                } else {\n                    return address;\n                }\n            };\n\n            // still no address\n            if (!data.address.length) {\n                for (i = data.text.length - 1; i >= 0; i--) {\n                    // fixed the regex to parse email address correctly when email address has more than one @\n                    data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n                    if (data.address.length) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        // If there's still is no text but a comment exixts, replace the two\n        if (!data.text.length && data.comment.length) {\n            data.text = data.comment;\n            data.comment = [];\n        }\n\n        // Keep only the first address occurence, push others to regular text\n        if (data.address.length > 1) {\n            data.text = data.text.concat(data.address.splice(1));\n        }\n\n        // Join values with spaces\n        data.text = data.text.join(' ');\n        data.address = data.address.join(' ');\n\n        if (!data.address && isGroup) {\n            return [];\n        } else {\n            address = {\n                address: data.address || data.text || '',\n                name: data.text || data.address || ''\n            };\n\n            if (address.address === address.name) {\n                if ((address.address || '').match(/@/)) {\n                    address.name = '';\n                } else {\n                    address.address = '';\n                }\n\n            }\n\n            addresses.push(address);\n        }\n    }\n\n    return addresses;\n}\n\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */\nfunction Tokenizer(str) {\n    this.str = (str || '').toString();\n    this.operatorCurrent = '';\n    this.operatorExpecting = '';\n    this.node = null;\n    this.escaped = false;\n\n    this.list = [];\n}\n\n/**\n * Operator tokens and which tokens are expected to end the sequence\n */\nTokenizer.prototype.operators = {\n    '\"': '\"',\n    '(': ')',\n    '<': '>',\n    ',': '',\n    ':': ';',\n    // Semicolons are not a legal delimiter per the RFC2822 grammar other\n    // than for terminating a group, but they are also not valid for any\n    // other use in this context.  Given that some mail clients have\n    // historically allowed the semicolon as a delimiter equivalent to the\n    // comma in their UI, it makes sense to treat them the same as a comma\n    // when used outside of a group.\n    ';': ''\n};\n\n/**\n * Tokenizes the original input string\n *\n * @return {Array} An array of operator|text tokens\n */\nTokenizer.prototype.tokenize = function () {\n    var chr, list = [];\n    for (var i = 0, len = this.str.length; i < len; i++) {\n        chr = this.str.charAt(i);\n        this.checkChar(chr);\n    }\n\n    this.list.forEach(function (node) {\n        node.value = (node.value || '').toString().trim();\n        if (node.value) {\n            list.push(node);\n        }\n    });\n\n    return list;\n};\n\n/**\n * Checks if a character is an operator or text and acts accordingly\n *\n * @param {String} chr Character from the address field\n */\nTokenizer.prototype.checkChar = function (chr) {\n    if ((chr in this.operators || chr === '\\\\') && this.escaped) {\n        this.escaped = false;\n    } else if (this.operatorExpecting && chr === this.operatorExpecting) {\n        this.node = {\n            type: 'operator',\n            value: chr\n        };\n        this.list.push(this.node);\n        this.node = null;\n        this.operatorExpecting = '';\n        this.escaped = false;\n        return;\n    } else if (!this.operatorExpecting && chr in this.operators) {\n        this.node = {\n            type: 'operator',\n            value: chr\n        };\n        this.list.push(this.node);\n        this.node = null;\n        this.operatorExpecting = this.operators[chr];\n        this.escaped = false;\n        return;\n    }\n\n    if (!this.escaped && chr === '\\\\') {\n        this.escaped = true;\n        return;\n    }\n\n    if (!this.node) {\n        this.node = {\n            type: 'text',\n            value: ''\n        };\n        this.list.push(this.node);\n    }\n\n    if (this.escaped && chr !== '\\\\') {\n        this.node.value += '\\\\';\n    }\n\n    this.node.value += chr;\n    this.escaped = false;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}