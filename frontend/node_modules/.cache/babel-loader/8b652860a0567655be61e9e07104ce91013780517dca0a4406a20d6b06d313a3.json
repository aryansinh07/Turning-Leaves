{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\nvar libmime = require('libmime');\nvar punycode = require('punycode');\n\n/**\n * @namespace DKIM Signer module\n * @name dkimsign\n */\nmodule.exports.DKIMSign = DKIMSign;\nmodule.exports.generateDKIMHeader = generateDKIMHeader;\nmodule.exports.sha256 = sha256;\n\n/**\n * <p>Sign an email with provided DKIM key, uses RSA-SHA256.</p>\n *\n * @memberOf dkimsign\n * @param {String} email Full e-mail source complete with headers and body to sign\n * @param {Object} options DKIM options\n * @param {String} [options.headerFieldNames='from:to:cc:subject'] Header fields to sign\n * @param {String} options.privateKey DKMI private key\n * @param {String} options.domainName Domain name to use for signing (ie: 'domain.com')\n * @param {String} options.keySelector Selector for the DKMI public key (ie. 'dkim' if you have set up a TXT record for 'dkim._domainkey.domain.com')\n *\n * @return {String} Signed DKIM-Signature header field for prepending\n */\nfunction DKIMSign(email, options) {\n  options = options || {};\n  email = (email || '').toString('utf-8');\n  var match = email.match(/^\\r?\\n|(?:\\r?\\n){2}/),\n    headers = match && email.substr(0, match.index) || '',\n    body = match && email.substr(match.index + match[0].length) || email;\n\n  // all listed fields from RFC4871 #5.5\n  // Some prociders do not like Message-Id, Date, Bounces-To and Return-Path\n  // fields in DKIM signed data so these are not automatcially included\n  var defaultFieldNames = 'From:Sender:Reply-To:Subject:To:' + 'Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:' + 'Content-Description:Resent-Date:Resent-From:Resent-Sender:' + 'Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:' + 'List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:' + 'List-Owner:List-Archive';\n  var dkim = generateDKIMHeader(options.domainName, options.keySelector, options.headerFieldNames || defaultFieldNames, headers, body),\n    canonicalizedHeaderData = DKIMCanonicalizer.relaxedHeaders(headers, options.headerFieldNames || defaultFieldNames),\n    canonicalizedDKIMHeader = DKIMCanonicalizer.relaxedHeaderLine(dkim),\n    signer,\n    signature;\n  canonicalizedHeaderData.headers += canonicalizedDKIMHeader.key + ':' + canonicalizedDKIMHeader.value;\n  signer = crypto.createSign('RSA-SHA256');\n  signer.update(canonicalizedHeaderData.headers);\n  signature = signer.sign(options.privateKey, 'base64');\n  return dkim + signature.replace(/(^.{73}|.{75}(?!\\r?\\n|\\r))/g, '$&\\r\\n ').trim();\n}\n\n/**\n * <p>Generates a DKIM-Signature header field without the signature part ('b=' is empty)</p>\n *\n * @memberOf dkimsign\n * @private\n * @param {String} domainName Domain name to use for signing\n * @param {String} keySelector Selector for the DKMI public key\n * @param {String} headerFieldNames Header fields to sign\n * @param {String} headers E-mail headers\n * @param {String} body E-mail body\n *\n * @return {String} Mime folded DKIM-Signature string\n */\nfunction generateDKIMHeader(domainName, keySelector, headerFieldNames, headers, body) {\n  var canonicalizedBody = DKIMCanonicalizer.relaxedBody(body),\n    canonicalizedBodyHash = sha256(canonicalizedBody, 'base64'),\n    canonicalizedHeaderData = DKIMCanonicalizer.relaxedHeaders(headers, headerFieldNames),\n    dkim;\n  if (hasUTFChars(domainName)) {\n    domainName = punycode.toASCII(domainName);\n  }\n  dkim = ['v=1', 'a=rsa-sha256', 'c=relaxed/relaxed', 'd=' + domainName, 'q=dns/txt', 's=' + keySelector, 'bh=' + canonicalizedBodyHash, 'h=' + canonicalizedHeaderData.fieldNames].join('; ');\n  return libmime.foldLines('DKIM-Signature: ' + dkim, 76) + ';\\r\\n b=';\n}\n\n/**\n * <p>DKIM canonicalization functions</p>\n *\n * @memberOf dkimsign\n * @private\n */\nvar DKIMCanonicalizer = {\n  /**\n   * <p>Simple body canonicalization by rfc4871 #3.4.3</p>\n   *\n   * @param {String} body E-mail body part\n   * @return {String} Canonicalized body\n   */\n  simpleBody: function (body) {\n    return (body || '').toString().replace(/(?:\\r?\\n|\\r)*$/, '\\r\\n');\n  },\n  /**\n   * <p>Relaxed body canonicalization by rfc4871 #3.4.4</p>\n   *\n   * @param {String} body E-mail body part\n   * @return {String} Canonicalized body\n   */\n  relaxedBody: function (body) {\n    return (body || '').toString().replace(/\\r?\\n|\\r/g, '\\n').split('\\n').map(function (line) {\n      return line.replace(/\\s*$/, '').\n      //rtrim\n      replace(/\\s+/g, ' '); // only single spaces\n    }).join('\\n').replace(/\\n*$/, '\\n').replace(/\\n/g, '\\r\\n');\n  },\n  /**\n   * <p>Relaxed headers canonicalization by rfc4871 #3.4.2 with filtering</p>\n   *\n   * @param {String} body E-mail headers part\n   * @return {String} Canonicalized headers\n   */\n  relaxedHeaders: function (headers, fieldNames) {\n    var includedFields = (fieldNames || '').toLowerCase().split(':').map(function (field) {\n        return field.trim();\n      }),\n      headerFields = {},\n      headerLines = headers.split(/\\r?\\n|\\r/),\n      line,\n      i;\n\n    // join lines\n    for (i = headerLines.length - 1; i >= 0; i--) {\n      if (i && headerLines[i].match(/^\\s/)) {\n        headerLines[i - 1] += headerLines.splice(i, 1);\n      } else {\n        line = DKIMCanonicalizer.relaxedHeaderLine(headerLines[i]);\n\n        // on multiple values, include only the first one (the one in the bottom of the list)\n        if (includedFields.indexOf(line.key) >= 0 && !(line.key in headerFields)) {\n          headerFields[line.key] = line.value;\n        }\n      }\n    }\n    headers = [];\n    for (i = includedFields.length - 1; i >= 0; i--) {\n      if (!headerFields[includedFields[i]]) {\n        includedFields.splice(i, 1);\n      } else {\n        headers.unshift(includedFields[i] + ':' + headerFields[includedFields[i]]);\n      }\n    }\n    return {\n      headers: headers.join('\\r\\n') + '\\r\\n',\n      fieldNames: includedFields.join(':')\n    };\n  },\n  /**\n   * <p>Relaxed header canonicalization for single header line</p>\n   *\n   * @param {String} line Single header line\n   * @return {String} Canonicalized header line\n   */\n  relaxedHeaderLine: function (line) {\n    var value = line.split(':'),\n      key = (value.shift() || '').toLowerCase().trim();\n    value = value.join(':').replace(/\\s+/g, ' ').trim();\n    return {\n      key: key,\n      value: value\n    };\n  }\n};\nmodule.exports.DKIMCanonicalizer = DKIMCanonicalizer;\n\n/**\n * <p>Generates a SHA-256 hash</p>\n *\n * @param {String} str String to be hashed\n * @param {String} [encoding='hex'] Output encoding\n * @return {String} SHA-256 hash in the selected output encoding\n */\nfunction sha256(str, encoding) {\n  var shasum = crypto.createHash('sha256');\n  shasum.update(str);\n  return shasum.digest(encoding || 'hex');\n}\n\n/**\n * <p>Detects if a string includes unicode symbols</p>\n *\n * @param {String} str String to be checked\n * @return {String} true, if string contains non-ascii symbols\n */\nfunction hasUTFChars(str) {\n  var rforeign = /[^\\u0000-\\u007f]/;\n  return !!rforeign.test(str);\n}","map":{"version":3,"names":["crypto","require","libmime","punycode","module","exports","DKIMSign","generateDKIMHeader","sha256","email","options","toString","match","headers","substr","index","body","length","defaultFieldNames","dkim","domainName","keySelector","headerFieldNames","canonicalizedHeaderData","DKIMCanonicalizer","relaxedHeaders","canonicalizedDKIMHeader","relaxedHeaderLine","signer","signature","key","value","createSign","update","sign","privateKey","replace","trim","canonicalizedBody","relaxedBody","canonicalizedBodyHash","hasUTFChars","toASCII","fieldNames","join","foldLines","simpleBody","split","map","line","includedFields","toLowerCase","field","headerFields","headerLines","i","splice","indexOf","unshift","shift","str","encoding","shasum","createHash","digest","rforeign","test"],"sources":["C:/Users/Admin/OneDrive/Desktop/Online Book Thrift Store/frontend/node_modules/dkim-signer/lib/dkim.js"],"sourcesContent":["'use strict';\n\nvar crypto = require('crypto');\nvar libmime = require('libmime');\nvar punycode = require('punycode');\n\n/**\n * @namespace DKIM Signer module\n * @name dkimsign\n */\nmodule.exports.DKIMSign = DKIMSign;\nmodule.exports.generateDKIMHeader = generateDKIMHeader;\nmodule.exports.sha256 = sha256;\n\n/**\n * <p>Sign an email with provided DKIM key, uses RSA-SHA256.</p>\n *\n * @memberOf dkimsign\n * @param {String} email Full e-mail source complete with headers and body to sign\n * @param {Object} options DKIM options\n * @param {String} [options.headerFieldNames='from:to:cc:subject'] Header fields to sign\n * @param {String} options.privateKey DKMI private key\n * @param {String} options.domainName Domain name to use for signing (ie: 'domain.com')\n * @param {String} options.keySelector Selector for the DKMI public key (ie. 'dkim' if you have set up a TXT record for 'dkim._domainkey.domain.com')\n *\n * @return {String} Signed DKIM-Signature header field for prepending\n */\nfunction DKIMSign(email, options) {\n    options = options || {};\n    email = (email || '').toString('utf-8');\n\n    var match = email.match(/^\\r?\\n|(?:\\r?\\n){2}/),\n        headers = match && email.substr(0, match.index) || '',\n        body = match && email.substr(match.index + match[0].length) || email;\n\n    // all listed fields from RFC4871 #5.5\n    // Some prociders do not like Message-Id, Date, Bounces-To and Return-Path\n    // fields in DKIM signed data so these are not automatcially included\n    var defaultFieldNames = 'From:Sender:Reply-To:Subject:To:' +\n        'Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:' +\n        'Content-Description:Resent-Date:Resent-From:Resent-Sender:' +\n        'Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:' +\n        'List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:' +\n        'List-Owner:List-Archive';\n\n    var dkim = generateDKIMHeader(options.domainName, options.keySelector, options.headerFieldNames || defaultFieldNames, headers, body),\n        canonicalizedHeaderData = DKIMCanonicalizer.relaxedHeaders(headers, options.headerFieldNames || defaultFieldNames),\n        canonicalizedDKIMHeader = DKIMCanonicalizer.relaxedHeaderLine(dkim),\n        signer, signature;\n\n    canonicalizedHeaderData.headers += canonicalizedDKIMHeader.key + ':' + canonicalizedDKIMHeader.value;\n\n    signer = crypto.createSign('RSA-SHA256');\n    signer.update(canonicalizedHeaderData.headers);\n    signature = signer.sign(options.privateKey, 'base64');\n\n    return dkim + signature.replace(/(^.{73}|.{75}(?!\\r?\\n|\\r))/g, '$&\\r\\n ').trim();\n}\n\n/**\n * <p>Generates a DKIM-Signature header field without the signature part ('b=' is empty)</p>\n *\n * @memberOf dkimsign\n * @private\n * @param {String} domainName Domain name to use for signing\n * @param {String} keySelector Selector for the DKMI public key\n * @param {String} headerFieldNames Header fields to sign\n * @param {String} headers E-mail headers\n * @param {String} body E-mail body\n *\n * @return {String} Mime folded DKIM-Signature string\n */\nfunction generateDKIMHeader(domainName, keySelector, headerFieldNames, headers, body) {\n    var canonicalizedBody = DKIMCanonicalizer.relaxedBody(body),\n        canonicalizedBodyHash = sha256(canonicalizedBody, 'base64'),\n        canonicalizedHeaderData = DKIMCanonicalizer.relaxedHeaders(headers, headerFieldNames),\n        dkim;\n\n    if (hasUTFChars(domainName)) {\n        domainName = punycode.toASCII(domainName);\n    }\n\n    dkim = [\n        'v=1',\n        'a=rsa-sha256',\n        'c=relaxed/relaxed',\n        'd=' + domainName,\n        'q=dns/txt',\n        's=' + keySelector,\n        'bh=' + canonicalizedBodyHash,\n        'h=' + canonicalizedHeaderData.fieldNames\n    ].join('; ');\n\n    return libmime.foldLines('DKIM-Signature: ' + dkim, 76) + ';\\r\\n b=';\n}\n\n/**\n * <p>DKIM canonicalization functions</p>\n *\n * @memberOf dkimsign\n * @private\n */\nvar DKIMCanonicalizer = {\n\n    /**\n     * <p>Simple body canonicalization by rfc4871 #3.4.3</p>\n     *\n     * @param {String} body E-mail body part\n     * @return {String} Canonicalized body\n     */\n    simpleBody: function(body) {\n        return (body || '').toString().replace(/(?:\\r?\\n|\\r)*$/, '\\r\\n');\n    },\n\n    /**\n     * <p>Relaxed body canonicalization by rfc4871 #3.4.4</p>\n     *\n     * @param {String} body E-mail body part\n     * @return {String} Canonicalized body\n     */\n    relaxedBody: function(body) {\n        return (body || '').toString().\n        replace(/\\r?\\n|\\r/g, '\\n').\n        split('\\n').\n        map(function(line) {\n            return line.replace(/\\s*$/, ''). //rtrim\n            replace(/\\s+/g, ' '); // only single spaces\n        }).\n        join('\\n').\n        replace(/\\n*$/, '\\n').\n        replace(/\\n/g, '\\r\\n');\n    },\n\n    /**\n     * <p>Relaxed headers canonicalization by rfc4871 #3.4.2 with filtering</p>\n     *\n     * @param {String} body E-mail headers part\n     * @return {String} Canonicalized headers\n     */\n    relaxedHeaders: function(headers, fieldNames) {\n        var includedFields = (fieldNames || '').toLowerCase().\n        split(':').\n        map(function(field) {\n            return field.trim();\n        }),\n        headerFields = {},\n        headerLines = headers.split(/\\r?\\n|\\r/),\n        line, i;\n\n        // join lines\n        for (i = headerLines.length - 1; i >= 0; i--) {\n            if (i && headerLines[i].match(/^\\s/)) {\n                headerLines[i - 1] += headerLines.splice(i, 1);\n            } else {\n                line = DKIMCanonicalizer.relaxedHeaderLine(headerLines[i]);\n\n                // on multiple values, include only the first one (the one in the bottom of the list)\n                if (includedFields.indexOf(line.key) >= 0 && !(line.key in headerFields)) {\n                    headerFields[line.key] = line.value;\n                }\n            }\n        }\n\n        headers = [];\n        for (i = includedFields.length - 1; i >= 0; i--) {\n            if (!headerFields[includedFields[i]]) {\n                includedFields.splice(i, 1);\n            } else {\n                headers.unshift(includedFields[i] + ':' + headerFields[includedFields[i]]);\n            }\n        }\n\n        return {\n            headers: headers.join('\\r\\n') + '\\r\\n',\n            fieldNames: includedFields.join(':')\n        };\n    },\n\n    /**\n     * <p>Relaxed header canonicalization for single header line</p>\n     *\n     * @param {String} line Single header line\n     * @return {String} Canonicalized header line\n     */\n    relaxedHeaderLine: function(line) {\n        var value = line.split(':'),\n            key = (value.shift() || '').toLowerCase().trim();\n\n        value = value.join(':').replace(/\\s+/g, ' ').trim();\n\n        return {\n            key: key,\n            value: value\n        };\n    }\n};\nmodule.exports.DKIMCanonicalizer = DKIMCanonicalizer;\n\n/**\n * <p>Generates a SHA-256 hash</p>\n *\n * @param {String} str String to be hashed\n * @param {String} [encoding='hex'] Output encoding\n * @return {String} SHA-256 hash in the selected output encoding\n */\nfunction sha256(str, encoding) {\n    var shasum = crypto.createHash('sha256');\n    shasum.update(str);\n    return shasum.digest(encoding || 'hex');\n}\n\n/**\n * <p>Detects if a string includes unicode symbols</p>\n *\n * @param {String} str String to be checked\n * @return {String} true, if string contains non-ascii symbols\n */\nfunction hasUTFChars(str) {\n    var rforeign = /[^\\u0000-\\u007f]/;\n    return !!rforeign.test(str);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}