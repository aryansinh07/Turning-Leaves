{"ast":null,"code":"const {\n  createConnection\n} = require('net');\nconst {\n  resolveMx\n} = require('dns');\nconst {\n  DKIMSign\n} = require('dkim-signer');\nconst CRLF = '\\r\\n';\nfunction dummy() {}\nmodule.exports = function (options) {\n  options = options || {};\n  const logger = options.logger || options.silent && {\n    debug: dummy,\n    info: dummy,\n    warn: dummy,\n    error: dummy\n  } || {\n    debug: console.log,\n    info: console.info,\n    warn: console.warn,\n    error: console.error\n  };\n  const dkimPrivateKey = (options.dkim || {}).privateKey;\n  const dkimKeySelector = (options.dkim || {}).keySelector || 'dkim';\n  const devPort = options.devPort || -1;\n  const devHost = options.devHost || 'localhost';\n  const smtpPort = options.smtpPort || 25;\n  const smtpHost = options.smtpHost || -1;\n  /*\n   *   邮件服务返回代码含义 Mail service return code Meaning\n   *   500   格式错误，命令不可识别（此错误也包括命令行过长）format error, command unrecognized (This error also includes command line too long)\n   *   501   参数格式错误 parameter format error\n   *   502   命令不可实现 command can not be achieved\n   *   503   错误的命令序列 Bad sequence of commands\n   *   504   命令参数不可实现 command parameter can not be achieved\n   *   211   系统状态或系统帮助响应 System status, or system help response\n   *   214   帮助信息 help\n   *   220   服务就绪 Services Ready\n   *   221   服务关闭传输信道 Service closing transmission channel\n   *   421   服务未就绪，关闭传输信道（当必须关闭时，此应答可以作为对任何命令的响应）service is not ready to close the transmission channel (when it is necessary to close, this response may be in response to any command)\n   *   250   要求的邮件操作完成 requested mail action completed\n   *   251   用户非本地，将转发向 non-local users will be forwarded to\n   *   450   要求的邮件操作未完成，邮箱不可用（例如，邮箱忙）Mail the required operation 450 unfinished, mailbox unavailable (for example, mailbox busy)\n   *   550   要求的邮件操作未完成，邮箱不可用（例如，邮箱未找到，或不可访问）Mail action not completed the required 550 mailbox unavailable (eg, mailbox not found, no access)\n   *   451   放弃要求的操作；处理过程中出错 waiver operation; processing error\n   *   551   用户非本地，请尝试 non-local user, please try\n   *   452   系统存储不足，要求的操作未执行 Less than 452 storage system, requiring action not taken\n   *   552   过量的存储分配，要求的操作未执行 excess storage allocation requires action not taken\n   *   553   邮箱名不可用，要求的操作未执行（例如邮箱格式错误） mailbox name is not available, that the requested operation is not performed (for example, mailbox format error)\n   *   354   开始邮件输入，以.结束 Start Mail input to. End\n   *   554   操作失败  The operation failed\n   *   535   用户验证失败 User authentication failed\n   *   235   用户验证成功 user authentication is successful\n   *   334   等待用户输入验证信息 waits for the user to enter authentication information\n   */\n\n  function getHost(email) {\n    const m = /[^@]+@([\\w\\d\\-\\.]+)/.exec(email);\n    return m && m[1];\n  }\n  function groupRecipients(recipients) {\n    let groups = {};\n    let host;\n    const recipients_length = recipients.length;\n    for (let i = 0; i < recipients_length; i++) {\n      host = getHost(recipients[i]);\n      (groups[host] || (groups[host] = [])).push(recipients[i]);\n    }\n    return groups;\n  }\n\n  /**\n   * connect to domain by Mx record\n   */\n  function connectMx(domain, callback) {\n    if (devPort === -1) {\n      // not in development mode -> search the MX\n      resolveMx(domain, function (err, data) {\n        if (err) {\n          return callback(err);\n        }\n        data.sort(function (a, b) {\n          return a.priority > b.priority;\n        });\n        logger.debug('mx resolved: ', data);\n        if (!data || data.length === 0) {\n          return callback(new Error('can not resolve Mx of <' + domain + '>'));\n        }\n        if (smtpHost !== -1) data.push({\n          exchange: smtpHost\n        });\n        function tryConnect(i) {\n          if (i >= data.length) return callback(new Error('can not connect to any SMTP server'));\n          const sock = createConnection(smtpPort, data[i].exchange);\n          sock.on('error', function (err) {\n            logger.error('Error on connectMx for: ', data[i], err);\n            tryConnect(++i);\n          });\n          sock.on('connect', function () {\n            logger.debug('MX connection created: ', data[i].exchange);\n            sock.removeAllListeners('error');\n            callback(null, sock);\n          });\n        }\n        tryConnect(0);\n      });\n    } else {\n      // development mode -> connect to the specified devPort on devHost\n      const sock = createConnection(devPort, devHost);\n      sock.on('error', function (err) {\n        callback(new Error('Error on connectMx (development) for \"' + devHost + ':' + devPort + '\": ' + err));\n      });\n      sock.on('connect', function () {\n        logger.debug('MX (development) connection created: ' + devHost + ':' + devPort);\n        sock.removeAllListeners('error');\n        callback(null, sock);\n      });\n    }\n  }\n  function sendToSMTP(domain, srcHost, from, recipients, body, cb) {\n    const callback = typeof cb === 'function' ? cb : function () {};\n    connectMx(domain, function (err, sock) {\n      if (err) {\n        logger.error('error on connectMx', err.stack);\n        return callback(err);\n      }\n      function w(s) {\n        logger.debug('send ' + domain + '>' + s);\n        sock.write(s + CRLF);\n      }\n      sock.setEncoding('utf8');\n      sock.on('data', function (chunk) {\n        data += chunk;\n        parts = data.split(CRLF);\n        const parts_length = parts.length - 1;\n        for (let i = 0, len = parts_length; i < len; i++) {\n          onLine(parts[i]);\n        }\n        data = parts[parts.length - 1];\n      });\n      sock.on('error', function (err) {\n        logger.error('fail to connect ' + domain);\n        callback(err);\n      });\n      let data = '';\n      let step = 0;\n      let loginStep = 0;\n      const queue = [];\n      const login = [];\n      let parts;\n      let cmd;\n\n      /*\n       if(mail.user && mail.pass){\n         queue.push('AUTH LOGIN');\n         login.push(new Buffer(mail.user).toString(\"base64\"));\n         login.push(new Buffer(mail.pass).toString(\"base64\"));\n       }\n       */\n\n      queue.push('MAIL FROM:<' + from + '>');\n      const recipients_length = recipients.length;\n      for (let i = 0; i < recipients_length; i++) {\n        queue.push('RCPT TO:<' + recipients[i] + '>');\n      }\n      queue.push('DATA');\n      queue.push('QUIT');\n      queue.push('');\n      function response(code, msg) {\n        switch (code) {\n          case 220:\n            //*   220   on server ready\n            //*   220   服务就绪\n            if (/\\besmtp\\b/i.test(msg)) {\n              // TODO:  determin AUTH type; auth login, auth crm-md5, auth plain\n              cmd = 'EHLO';\n            } else {\n              cmd = 'HELO';\n            }\n            w(cmd + ' ' + srcHost);\n            break;\n          case 221: // bye\n          case 235: // verify ok\n          case 250: // operation OK\n          case 251:\n            // foward\n            if (step === queue.length - 1) {\n              logger.info('OK:', code, msg);\n              callback(null, msg);\n            }\n            w(queue[step]);\n            step++;\n            break;\n          case 354:\n            // start input end with . (dot)\n            logger.info('sending mail', body);\n            w(body);\n            w('');\n            w('.');\n            break;\n          case 334:\n            // input login\n            w(login[loginStep]);\n            loginStep++;\n            break;\n          default:\n            if (code >= 400) {\n              logger.warn('SMTP responds error code', code);\n              callback(new Error('SMTP code:' + code + ' msg:' + msg));\n              sock.end();\n            }\n        }\n      }\n      let msg = '';\n      function onLine(line) {\n        logger.debug('recv ' + domain + '>' + line);\n        msg += line + CRLF;\n        if (line[3] === ' ') {\n          // 250-information dash is not complete.\n          // 250 OK. space is complete.\n          let lineNumber = parseInt(line);\n          response(lineNumber, msg);\n          msg = '';\n        }\n      }\n    });\n  }\n  function getAddress(address) {\n    return address.replace(/^.+</, '').replace(/>\\s*$/, '').trim();\n  }\n  function getAddresses(addresses) {\n    const results = [];\n    if (!Array.isArray(addresses)) {\n      addresses = addresses.split(',');\n    }\n    const addresses_length = addresses.length;\n    for (let i = 0; i < addresses_length; i++) {\n      results.push(getAddress(addresses[i]));\n    }\n    return results;\n  }\n\n  /**\n   * sendmail directly\n   *\n   * @param mail {object}\n   *             from\n   *             to\n   *             cc\n   *             bcc\n   *             replyTo\n   *             returnTo\n   *             subject\n   *             type         default 'text/plain', 'text/html'\n   *             charset      default 'utf-8'\n   *             encoding     default 'base64'\n   *             id           default timestamp+from\n   *             headers      object\n   *             content\n   *             attachments\n   *               [{\n   *                 type\n   *                 filename\n   *                 content\n   *               }].\n   *\n   * @param callback function(err, domain).\n   *\n   */\n  function sendmail(mail, callback) {\n    const mailcomposer = require('mailcomposer');\n    const mailMe = mailcomposer(mail);\n    let recipients = [];\n    let groups;\n    let srcHost;\n    if (mail.to) {\n      recipients = recipients.concat(getAddresses(mail.to));\n    }\n    if (mail.cc) {\n      recipients = recipients.concat(getAddresses(mail.cc));\n    }\n    if (mail.bcc) {\n      recipients = recipients.concat(getAddresses(mail.bcc));\n    }\n    groups = groupRecipients(recipients);\n    const from = getAddress(mail.from);\n    srcHost = getHost(from);\n    mailMe.build(function (err, message) {\n      if (err) {\n        logger.error('Error on creating message : ', err);\n        callback(err, null);\n        return;\n      }\n      if (dkimPrivateKey) {\n        const signature = DKIMSign(message, {\n          privateKey: dkimPrivateKey,\n          keySelector: dkimKeySelector,\n          domainName: srcHost\n        });\n        message = signature + '\\r\\n' + message;\n      }\n      for (let domain in groups) {\n        sendToSMTP(domain, srcHost, from, groups[domain], message, callback);\n      }\n    });\n  }\n  return sendmail;\n};","map":{"version":3,"names":["createConnection","require","resolveMx","DKIMSign","CRLF","dummy","module","exports","options","logger","silent","debug","info","warn","error","console","log","dkimPrivateKey","dkim","privateKey","dkimKeySelector","keySelector","devPort","devHost","smtpPort","smtpHost","getHost","email","m","exec","groupRecipients","recipients","groups","host","recipients_length","length","i","push","connectMx","domain","callback","err","data","sort","a","b","priority","Error","exchange","tryConnect","sock","on","removeAllListeners","sendToSMTP","srcHost","from","body","cb","stack","w","s","write","setEncoding","chunk","parts","split","parts_length","len","onLine","step","loginStep","queue","login","cmd","response","code","msg","test","end","line","lineNumber","parseInt","getAddress","address","replace","trim","getAddresses","addresses","results","Array","isArray","addresses_length","sendmail","mail","mailcomposer","mailMe","to","concat","cc","bcc","build","message","signature","domainName"],"sources":["C:/Users/Admin/OneDrive/Desktop/Online Book Thrift Store/frontend/node_modules/sendmail/sendmail.js"],"sourcesContent":["const {createConnection} = require('net');\nconst {resolveMx} = require('dns');\nconst {DKIMSign} = require('dkim-signer');\nconst CRLF = '\\r\\n';\n\nfunction dummy () {}\nmodule.exports = function (options) {\n  options = options || {};\n  const logger = options.logger || (options.silent && {\n    debug: dummy,\n    info: dummy,\n    warn: dummy,\n    error: dummy\n  } || {\n    debug: console.log,\n    info: console.info,\n    warn: console.warn,\n    error: console.error\n  });\n  const dkimPrivateKey = (options.dkim || {}).privateKey;\n  const dkimKeySelector = (options.dkim || {}).keySelector || 'dkim';\n  const devPort = options.devPort || -1;\n  const devHost = options.devHost || 'localhost';\n  const smtpPort = options.smtpPort || 25\n  const smtpHost = options.smtpHost || -1\n  /*\n   *   邮件服务返回代码含义 Mail service return code Meaning\n   *   500   格式错误，命令不可识别（此错误也包括命令行过长）format error, command unrecognized (This error also includes command line too long)\n   *   501   参数格式错误 parameter format error\n   *   502   命令不可实现 command can not be achieved\n   *   503   错误的命令序列 Bad sequence of commands\n   *   504   命令参数不可实现 command parameter can not be achieved\n   *   211   系统状态或系统帮助响应 System status, or system help response\n   *   214   帮助信息 help\n   *   220   服务就绪 Services Ready\n   *   221   服务关闭传输信道 Service closing transmission channel\n   *   421   服务未就绪，关闭传输信道（当必须关闭时，此应答可以作为对任何命令的响应）service is not ready to close the transmission channel (when it is necessary to close, this response may be in response to any command)\n   *   250   要求的邮件操作完成 requested mail action completed\n   *   251   用户非本地，将转发向 non-local users will be forwarded to\n   *   450   要求的邮件操作未完成，邮箱不可用（例如，邮箱忙）Mail the required operation 450 unfinished, mailbox unavailable (for example, mailbox busy)\n   *   550   要求的邮件操作未完成，邮箱不可用（例如，邮箱未找到，或不可访问）Mail action not completed the required 550 mailbox unavailable (eg, mailbox not found, no access)\n   *   451   放弃要求的操作；处理过程中出错 waiver operation; processing error\n   *   551   用户非本地，请尝试 non-local user, please try\n   *   452   系统存储不足，要求的操作未执行 Less than 452 storage system, requiring action not taken\n   *   552   过量的存储分配，要求的操作未执行 excess storage allocation requires action not taken\n   *   553   邮箱名不可用，要求的操作未执行（例如邮箱格式错误） mailbox name is not available, that the requested operation is not performed (for example, mailbox format error)\n   *   354   开始邮件输入，以.结束 Start Mail input to. End\n   *   554   操作失败  The operation failed\n   *   535   用户验证失败 User authentication failed\n   *   235   用户验证成功 user authentication is successful\n   *   334   等待用户输入验证信息 waits for the user to enter authentication information\n   */\n\n  function getHost (email) {\n    const m = /[^@]+@([\\w\\d\\-\\.]+)/.exec(email);\n    return m && m[1];\n  }\n\n  function groupRecipients (recipients) {\n    let groups = {};\n    let host;\n    const recipients_length = recipients.length;\n    for (let i = 0; i < recipients_length; i++) {\n      host = getHost(recipients[i]);\n      (groups[host] || (groups[host] = [])).push(recipients[i])\n    }\n    return groups\n  }\n\n  /**\n   * connect to domain by Mx record\n   */\n  function connectMx (domain, callback) {\n    if (devPort === -1) { // not in development mode -> search the MX\n      resolveMx(domain, function (err, data) {\n        if (err) {\n          return callback(err)\n        }\n\n        data.sort(function (a, b) { return a.priority > b.priority });\n        logger.debug('mx resolved: ', data);\n\n        if (!data || data.length === 0) {\n          return callback(new Error('can not resolve Mx of <' + domain + '>'))\n        }\n        if(smtpHost !== -1)data.push({exchange:smtpHost})\n        function tryConnect (i) {\n          if (i >= data.length) return callback(new Error('can not connect to any SMTP server'));\n\n          const sock = createConnection(smtpPort, data[i].exchange);\n\n          sock.on('error', function (err) {\n            logger.error('Error on connectMx for: ', data[i], err);\n            tryConnect(++i)\n          });\n\n          sock.on('connect', function () {\n            logger.debug('MX connection created: ', data[i].exchange);\n            sock.removeAllListeners('error');\n            callback(null, sock)\n          })\n        }\n\n        tryConnect(0)\n      })\n    } else { // development mode -> connect to the specified devPort on devHost\n      const sock = createConnection(devPort, devHost);\n\n      sock.on('error', function (err) {\n        callback(new Error('Error on connectMx (development) for \"'+ devHost +':' + devPort + '\": ' + err))\n      });\n\n      sock.on('connect', function () {\n        logger.debug('MX (development) connection created: '+ devHost +':' + devPort);\n        sock.removeAllListeners('error');\n        callback(null, sock)\n      })\n    }\n  }\n\n  function sendToSMTP (domain, srcHost, from, recipients, body, cb) {\n    const callback = (typeof cb === 'function') ? cb : function () {};\n    connectMx(domain, function (err, sock) {\n      if (err) {\n        logger.error('error on connectMx', err.stack);\n        return callback(err)\n      }\n\n      function w (s) {\n        logger.debug('send ' + domain + '>' + s);\n        sock.write(s + CRLF)\n      }\n\n      sock.setEncoding('utf8');\n\n      sock.on('data', function (chunk) {\n        data += chunk;\n        parts = data.split(CRLF);\n        const parts_length = parts.length - 1;\n        for (let i = 0, len = parts_length; i < len; i++) {\n          onLine(parts[i])\n        }\n        data = parts[parts.length - 1]\n      });\n\n      sock.on('error', function (err) {\n        logger.error('fail to connect ' + domain)\n        callback(err)\n      });\n\n      let data = '';\n      let step = 0;\n      let loginStep = 0;\n      const queue = [];\n      const login = [];\n      let parts;\n      let cmd;\n\n        /*\n         if(mail.user && mail.pass){\n           queue.push('AUTH LOGIN');\n           login.push(new Buffer(mail.user).toString(\"base64\"));\n           login.push(new Buffer(mail.pass).toString(\"base64\"));\n         }\n         */\n\n      queue.push('MAIL FROM:<' + from + '>');\n      const recipients_length = recipients.length;\n      for (let i = 0; i < recipients_length; i++) {\n        queue.push('RCPT TO:<' + recipients[i] + '>')\n      }\n      queue.push('DATA');\n      queue.push('QUIT');\n      queue.push('');\n\n      function response (code, msg) {\n        switch (code) {\n          case 220:\n            //*   220   on server ready\n            //*   220   服务就绪\n            if (/\\besmtp\\b/i.test(msg)) {\n              // TODO:  determin AUTH type; auth login, auth crm-md5, auth plain\n              cmd = 'EHLO'\n            } else {\n              cmd = 'HELO'\n            }\n            w(cmd + ' ' + srcHost);\n            break;\n\n          case 221: // bye\n          case 235: // verify ok\n          case 250: // operation OK\n          case 251: // foward\n            if (step === queue.length - 1) {\n              logger.info('OK:', code, msg);\n              callback(null, msg)\n            }\n            w(queue[step]);\n            step++;\n            break;\n\n          case 354: // start input end with . (dot)\n            logger.info('sending mail', body);\n            w(body);\n            w('');\n            w('.');\n            break;\n\n          case 334: // input login\n            w(login[loginStep]);\n            loginStep++;\n            break;\n\n          default:\n            if (code >= 400) {\n              logger.warn('SMTP responds error code', code);\n              callback(new Error('SMTP code:' + code + ' msg:' + msg));\n              sock.end();\n            }\n        }\n      }\n\n      let msg = '';\n\n      function onLine (line) {\n        logger.debug('recv ' + domain + '>' + line);\n\n        msg += (line + CRLF);\n\n        if (line[3] === ' ') {\n            // 250-information dash is not complete.\n            // 250 OK. space is complete.\n          let lineNumber = parseInt(line);\n          response(lineNumber, msg);\n          msg = '';\n        }\n      }\n    })\n  }\n\n  function getAddress (address) {\n    return address.replace(/^.+</, '').replace(/>\\s*$/, '').trim();\n  }\n\n  function getAddresses (addresses) {\n    const results = [];\n    if (!Array.isArray(addresses)) {\n      addresses = addresses.split(',');\n    }\n\n    const addresses_length = addresses.length;\n    for (let i = 0; i < addresses_length; i++) {\n      results.push(getAddress(addresses[i]));\n    }\n    return results\n  }\n\n  /**\n   * sendmail directly\n   *\n   * @param mail {object}\n   *             from\n   *             to\n   *             cc\n   *             bcc\n   *             replyTo\n   *             returnTo\n   *             subject\n   *             type         default 'text/plain', 'text/html'\n   *             charset      default 'utf-8'\n   *             encoding     default 'base64'\n   *             id           default timestamp+from\n   *             headers      object\n   *             content\n   *             attachments\n   *               [{\n   *                 type\n   *                 filename\n   *                 content\n   *               }].\n   *\n   * @param callback function(err, domain).\n   *\n   */\n  function sendmail (mail, callback) {\n    const mailcomposer = require('mailcomposer');\n    const mailMe = mailcomposer(mail);\n    let recipients = [];\n    let groups;\n    let srcHost;\n    if (mail.to) {\n      recipients = recipients.concat(getAddresses(mail.to))\n    }\n\n    if (mail.cc) {\n      recipients = recipients.concat(getAddresses(mail.cc))\n    }\n\n    if (mail.bcc) {\n      recipients = recipients.concat(getAddresses(mail.bcc))\n    }\n\n    groups = groupRecipients(recipients);\n\n    const from = getAddress(mail.from);\n    srcHost = getHost(from);\n\n    mailMe.build(function (err, message) {\n      if (err) {\n        logger.error('Error on creating message : ', err)\n        callback(err, null);\n        return\n      }\n      if (dkimPrivateKey) {\n        const signature = DKIMSign(message, {\n          privateKey: dkimPrivateKey,\n          keySelector: dkimKeySelector,\n          domainName: srcHost\n        });\n        message = signature + '\\r\\n' + message\n      }\n      for (let domain in groups) {\n        sendToSMTP(domain, srcHost, from, groups[domain], message, callback)\n      }\n    });\n  }\n  return sendmail\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}