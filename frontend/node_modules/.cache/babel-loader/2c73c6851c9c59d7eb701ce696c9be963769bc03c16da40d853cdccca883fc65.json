{"ast":null,"code":"'use strict';\n\n// module to handle cookies\nvar urllib = require('url');\nvar SESSION_TIMEOUT = 1800; // 30 min\n\nmodule.exports = Cookies;\n\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\nfunction Cookies(options) {\n  this.options = options || {};\n  this.cookies = [];\n}\n\n/**\n * Stores a cookie string to the cookie storage\n *\n * @param {String} cookieStr Value from the 'Set-Cookie:' header\n * @param {String} url Current URL\n */\nCookies.prototype.set = function (cookieStr, url) {\n  var urlparts = urllib.parse(url || '');\n  var cookie = this.parse(cookieStr);\n  var domain;\n  if (cookie.domain) {\n    domain = cookie.domain.replace(/^\\./, '');\n\n    // do not allow cross origin cookies\n    if (\n    // can't be valid if the requested domain is shorter than current hostname\n    urlparts.hostname.length < domain.length ||\n    // prefix domains with dot to be sure that partial matches are not used\n    ('.' + urlparts.hostname).substr(-domain.length + 1) !== '.' + domain) {\n      cookie.domain = urlparts.hostname;\n    }\n  } else {\n    cookie.domain = urlparts.hostname;\n  }\n  if (!cookie.path) {\n    cookie.path = this.getPath(urlparts.pathname);\n  }\n\n  // if no expire date, then use sessionTimeout value\n  if (!cookie.expires) {\n    cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n  }\n  return this.add(cookie);\n};\n\n/**\n * Returns cookie string for the 'Cookie:' header.\n *\n * @param {String} url URL to check for\n * @returns {String} Cookie header or empty string if no matches were found\n */\nCookies.prototype.get = function (url) {\n  return this.list(url).map(function (cookie) {\n    return cookie.name + '=' + cookie.value;\n  }).join('; ');\n};\n\n/**\n * Lists all valied cookie objects for the specified URL\n *\n * @param {String} url URL to check for\n * @returns {Array} An array of cookie objects\n */\nCookies.prototype.list = function (url) {\n  var result = [];\n  var i;\n  var cookie;\n  for (i = this.cookies.length - 1; i >= 0; i--) {\n    cookie = this.cookies[i];\n    if (this.isExpired(cookie)) {\n      this.cookies.splice(i, i);\n      continue;\n    }\n    if (this.match(cookie, url)) {\n      result.unshift(cookie);\n    }\n  }\n  return result;\n};\n\n/**\n * Parses cookie string from the 'Set-Cookie:' header\n *\n * @param {String} cookieStr String from the 'Set-Cookie:' header\n * @returns {Object} Cookie object\n */\nCookies.prototype.parse = function (cookieStr) {\n  var cookie = {};\n  (cookieStr || '').toString().split(';').forEach(function (cookiePart) {\n    var valueParts = cookiePart.split('=');\n    var key = valueParts.shift().trim().toLowerCase();\n    var value = valueParts.join('=').trim();\n    var domain;\n    if (!key) {\n      // skip empty parts\n      return;\n    }\n    switch (key) {\n      case 'expires':\n        value = new Date(value);\n        // ignore date if can not parse it\n        if (value.toString() !== 'Invalid Date') {\n          cookie.expires = value;\n        }\n        break;\n      case 'path':\n        cookie.path = value;\n        break;\n      case 'domain':\n        domain = value.toLowerCase();\n        if (domain.length && domain.charAt(0) !== '.') {\n          domain = '.' + domain; // ensure preceeding dot for user set domains\n        }\n        cookie.domain = domain;\n        break;\n      case 'max-age':\n        cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n        break;\n      case 'secure':\n        cookie.secure = true;\n        break;\n      case 'httponly':\n        cookie.httponly = true;\n        break;\n      default:\n        if (!cookie.name) {\n          cookie.name = key;\n          cookie.value = value;\n        }\n    }\n  });\n  return cookie;\n};\n\n/**\n * Checks if a cookie object is valid for a specified URL\n *\n * @param {Object} cookie Cookie object\n * @param {String} url URL to check for\n * @returns {Boolean} true if cookie is valid for specifiec URL\n */\nCookies.prototype.match = function (cookie, url) {\n  var urlparts = urllib.parse(url || '');\n\n  // check if hostname matches\n  // .foo.com also matches subdomains, foo.com does not\n  if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== '.' || ('.' + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {\n    return false;\n  }\n\n  // check if path matches\n  var path = this.getPath(urlparts.pathname);\n  if (path.substr(0, cookie.path.length) !== cookie.path) {\n    return false;\n  }\n\n  // check secure argument\n  if (cookie.secure && urlparts.protocol !== 'https:') {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Adds (or updates/removes if needed) a cookie object to the cookie storage\n *\n * @param {Object} cookie Cookie value to be stored\n */\nCookies.prototype.add = function (cookie) {\n  var i;\n  var len;\n\n  // nothing to do here\n  if (!cookie || !cookie.name) {\n    return false;\n  }\n\n  // overwrite if has same params\n  for (i = 0, len = this.cookies.length; i < len; i++) {\n    if (this.compare(this.cookies[i], cookie)) {\n      // check if the cookie needs to be removed instead\n      if (this.isExpired(cookie)) {\n        this.cookies.splice(i, 1); // remove expired/unset cookie\n        return false;\n      }\n      this.cookies[i] = cookie;\n      return true;\n    }\n  }\n\n  // add as new if not already expired\n  if (!this.isExpired(cookie)) {\n    this.cookies.push(cookie);\n  }\n  return true;\n};\n\n/**\n * Checks if two cookie objects are the same\n *\n * @param {Object} a Cookie to check against\n * @param {Object} b Cookie to check against\n * @returns {Boolean} True, if the cookies are the same\n */\nCookies.prototype.compare = function (a, b) {\n  return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n};\n\n/**\n * Checks if a cookie is expired\n *\n * @param {Object} cookie Cookie object to check against\n * @returns {Boolean} True, if the cookie is expired\n */\nCookies.prototype.isExpired = function (cookie) {\n  return cookie.expires && cookie.expires < new Date() || !cookie.value;\n};\n\n/**\n * Returns normalized cookie path for an URL path argument\n *\n * @param {String} pathname\n * @returns {String} Normalized path\n */\nCookies.prototype.getPath = function (pathname) {\n  var path = (pathname || '/').split('/');\n  path.pop(); // remove filename part\n  path = path.join('/').trim();\n\n  // ensure path prefix /\n  if (path.charAt(0) !== '/') {\n    path = '/' + path;\n  }\n\n  // ensure path suffix /\n  if (path.substr(-1) !== '/') {\n    path += '/';\n  }\n  return path;\n};","map":{"version":3,"names":["urllib","require","SESSION_TIMEOUT","module","exports","Cookies","options","cookies","prototype","set","cookieStr","url","urlparts","parse","cookie","domain","replace","hostname","length","substr","path","getPath","pathname","expires","Date","now","Number","sessionTimeout","add","get","list","map","name","value","join","result","i","isExpired","splice","match","unshift","toString","split","forEach","cookiePart","valueParts","key","shift","trim","toLowerCase","charAt","secure","httponly","protocol","len","compare","push","a","b","pop"],"sources":["C:/Users/Admin/OneDrive/Desktop/Online Book Thrift Store/frontend/node_modules/nodemailer-fetch/lib/cookies.js"],"sourcesContent":["'use strict';\n\n// module to handle cookies\n\nvar urllib = require('url');\n\nvar SESSION_TIMEOUT = 1800; // 30 min\n\nmodule.exports = Cookies;\n\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\nfunction Cookies(options) {\n    this.options = options || {};\n    this.cookies = [];\n}\n\n/**\n * Stores a cookie string to the cookie storage\n *\n * @param {String} cookieStr Value from the 'Set-Cookie:' header\n * @param {String} url Current URL\n */\nCookies.prototype.set = function (cookieStr, url) {\n    var urlparts = urllib.parse(url || '');\n    var cookie = this.parse(cookieStr);\n    var domain;\n\n    if (cookie.domain) {\n        domain = cookie.domain.replace(/^\\./, '');\n\n        // do not allow cross origin cookies\n        if (\n            // can't be valid if the requested domain is shorter than current hostname\n            urlparts.hostname.length < domain.length ||\n\n            // prefix domains with dot to be sure that partial matches are not used\n            ('.' + urlparts.hostname).substr(-domain.length + 1) !== ('.' + domain)) {\n            cookie.domain = urlparts.hostname;\n        }\n    } else {\n        cookie.domain = urlparts.hostname;\n    }\n\n    if (!cookie.path) {\n        cookie.path = this.getPath(urlparts.pathname);\n    }\n\n    // if no expire date, then use sessionTimeout value\n    if (!cookie.expires) {\n        cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n    }\n\n    return this.add(cookie);\n};\n\n/**\n * Returns cookie string for the 'Cookie:' header.\n *\n * @param {String} url URL to check for\n * @returns {String} Cookie header or empty string if no matches were found\n */\nCookies.prototype.get = function (url) {\n    return this.list(url).map(function (cookie) {\n        return cookie.name + '=' + cookie.value;\n    }).join('; ');\n};\n\n/**\n * Lists all valied cookie objects for the specified URL\n *\n * @param {String} url URL to check for\n * @returns {Array} An array of cookie objects\n */\nCookies.prototype.list = function (url) {\n    var result = [];\n    var i;\n    var cookie;\n\n    for (i = this.cookies.length - 1; i >= 0; i--) {\n        cookie = this.cookies[i];\n\n        if (this.isExpired(cookie)) {\n            this.cookies.splice(i, i);\n            continue;\n        }\n\n        if (this.match(cookie, url)) {\n            result.unshift(cookie);\n        }\n    }\n\n    return result;\n};\n\n/**\n * Parses cookie string from the 'Set-Cookie:' header\n *\n * @param {String} cookieStr String from the 'Set-Cookie:' header\n * @returns {Object} Cookie object\n */\nCookies.prototype.parse = function (cookieStr) {\n    var cookie = {};\n\n    (cookieStr || '').toString().split(';').forEach(function (cookiePart) {\n        var valueParts = cookiePart.split('=');\n        var key = valueParts.shift().trim().toLowerCase();\n        var value = valueParts.join('=').trim();\n        var domain;\n\n        if (!key) {\n            // skip empty parts\n            return;\n        }\n\n        switch (key) {\n\n            case 'expires':\n                value = new Date(value);\n                // ignore date if can not parse it\n                if (value.toString() !== 'Invalid Date') {\n                    cookie.expires = value;\n                }\n                break;\n\n            case 'path':\n                cookie.path = value;\n                break;\n\n            case 'domain':\n                domain = value.toLowerCase();\n                if (domain.length && domain.charAt(0) !== '.') {\n                    domain = '.' + domain; // ensure preceeding dot for user set domains\n                }\n                cookie.domain = domain;\n                break;\n\n            case 'max-age':\n                cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n                break;\n\n            case 'secure':\n                cookie.secure = true;\n                break;\n\n            case 'httponly':\n                cookie.httponly = true;\n                break;\n\n            default:\n                if (!cookie.name) {\n                    cookie.name = key;\n                    cookie.value = value;\n                }\n        }\n    });\n\n    return cookie;\n};\n\n/**\n * Checks if a cookie object is valid for a specified URL\n *\n * @param {Object} cookie Cookie object\n * @param {String} url URL to check for\n * @returns {Boolean} true if cookie is valid for specifiec URL\n */\nCookies.prototype.match = function (cookie, url) {\n    var urlparts = urllib.parse(url || '');\n\n    // check if hostname matches\n    // .foo.com also matches subdomains, foo.com does not\n    if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== '.' || ('.' + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {\n        return false;\n    }\n\n    // check if path matches\n    var path = this.getPath(urlparts.pathname);\n    if (path.substr(0, cookie.path.length) !== cookie.path) {\n        return false;\n    }\n\n    // check secure argument\n    if (cookie.secure && urlparts.protocol !== 'https:') {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Adds (or updates/removes if needed) a cookie object to the cookie storage\n *\n * @param {Object} cookie Cookie value to be stored\n */\nCookies.prototype.add = function (cookie) {\n    var i;\n    var len;\n\n    // nothing to do here\n    if (!cookie || !cookie.name) {\n        return false;\n    }\n\n    // overwrite if has same params\n    for (i = 0, len = this.cookies.length; i < len; i++) {\n        if (this.compare(this.cookies[i], cookie)) {\n\n            // check if the cookie needs to be removed instead\n            if (this.isExpired(cookie)) {\n                this.cookies.splice(i, 1); // remove expired/unset cookie\n                return false;\n            }\n\n            this.cookies[i] = cookie;\n            return true;\n        }\n    }\n\n    // add as new if not already expired\n    if (!this.isExpired(cookie)) {\n        this.cookies.push(cookie);\n    }\n\n    return true;\n};\n\n/**\n * Checks if two cookie objects are the same\n *\n * @param {Object} a Cookie to check against\n * @param {Object} b Cookie to check against\n * @returns {Boolean} True, if the cookies are the same\n */\nCookies.prototype.compare = function (a, b) {\n    return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n};\n\n/**\n * Checks if a cookie is expired\n *\n * @param {Object} cookie Cookie object to check against\n * @returns {Boolean} True, if the cookie is expired\n */\nCookies.prototype.isExpired = function (cookie) {\n    return (cookie.expires && cookie.expires < new Date()) || !cookie.value;\n};\n\n/**\n * Returns normalized cookie path for an URL path argument\n *\n * @param {String} pathname\n * @returns {String} Normalized path\n */\nCookies.prototype.getPath = function (pathname) {\n    var path = (pathname || '/').split('/');\n    path.pop(); // remove filename part\n    path = path.join('/').trim();\n\n    // ensure path prefix /\n    if (path.charAt(0) !== '/') {\n        path = '/' + path;\n    }\n\n    // ensure path suffix /\n    if (path.substr(-1) !== '/') {\n        path += '/';\n    }\n\n    return path;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,KAAK,CAAC;AAE3B,IAAIC,eAAe,GAAG,IAAI,CAAC,CAAC;;AAE5BC,MAAM,CAACC,OAAO,GAAGC,OAAO;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAOA,CAACC,OAAO,EAAE;EACtB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAC5B,IAAI,CAACC,OAAO,GAAG,EAAE;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACG,SAAS,CAACC,GAAG,GAAG,UAAUC,SAAS,EAAEC,GAAG,EAAE;EAC9C,IAAIC,QAAQ,GAAGZ,MAAM,CAACa,KAAK,CAACF,GAAG,IAAI,EAAE,CAAC;EACtC,IAAIG,MAAM,GAAG,IAAI,CAACD,KAAK,CAACH,SAAS,CAAC;EAClC,IAAIK,MAAM;EAEV,IAAID,MAAM,CAACC,MAAM,EAAE;IACfA,MAAM,GAAGD,MAAM,CAACC,MAAM,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;IAEzC;IACA;IACI;IACAJ,QAAQ,CAACK,QAAQ,CAACC,MAAM,GAAGH,MAAM,CAACG,MAAM;IAExC;IACA,CAAC,GAAG,GAAGN,QAAQ,CAACK,QAAQ,EAAEE,MAAM,CAAC,CAACJ,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC,KAAM,GAAG,GAAGH,MAAO,EAAE;MACzED,MAAM,CAACC,MAAM,GAAGH,QAAQ,CAACK,QAAQ;IACrC;EACJ,CAAC,MAAM;IACHH,MAAM,CAACC,MAAM,GAAGH,QAAQ,CAACK,QAAQ;EACrC;EAEA,IAAI,CAACH,MAAM,CAACM,IAAI,EAAE;IACdN,MAAM,CAACM,IAAI,GAAG,IAAI,CAACC,OAAO,CAACT,QAAQ,CAACU,QAAQ,CAAC;EACjD;;EAEA;EACA,IAAI,CAACR,MAAM,CAACS,OAAO,EAAE;IACjBT,MAAM,CAACS,OAAO,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAACC,MAAM,CAAC,IAAI,CAACpB,OAAO,CAACqB,cAAc,IAAIzB,eAAe,CAAC,IAAIA,eAAe,IAAI,IAAI,CAAC;EAC9H;EAEA,OAAO,IAAI,CAAC0B,GAAG,CAACd,MAAM,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAT,OAAO,CAACG,SAAS,CAACqB,GAAG,GAAG,UAAUlB,GAAG,EAAE;EACnC,OAAO,IAAI,CAACmB,IAAI,CAACnB,GAAG,CAAC,CAACoB,GAAG,CAAC,UAAUjB,MAAM,EAAE;IACxC,OAAOA,MAAM,CAACkB,IAAI,GAAG,GAAG,GAAGlB,MAAM,CAACmB,KAAK;EAC3C,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA7B,OAAO,CAACG,SAAS,CAACsB,IAAI,GAAG,UAAUnB,GAAG,EAAE;EACpC,IAAIwB,MAAM,GAAG,EAAE;EACf,IAAIC,CAAC;EACL,IAAItB,MAAM;EAEV,KAAKsB,CAAC,GAAG,IAAI,CAAC7B,OAAO,CAACW,MAAM,GAAG,CAAC,EAAEkB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3CtB,MAAM,GAAG,IAAI,CAACP,OAAO,CAAC6B,CAAC,CAAC;IAExB,IAAI,IAAI,CAACC,SAAS,CAACvB,MAAM,CAAC,EAAE;MACxB,IAAI,CAACP,OAAO,CAAC+B,MAAM,CAACF,CAAC,EAAEA,CAAC,CAAC;MACzB;IACJ;IAEA,IAAI,IAAI,CAACG,KAAK,CAACzB,MAAM,EAAEH,GAAG,CAAC,EAAE;MACzBwB,MAAM,CAACK,OAAO,CAAC1B,MAAM,CAAC;IAC1B;EACJ;EAEA,OAAOqB,MAAM;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA9B,OAAO,CAACG,SAAS,CAACK,KAAK,GAAG,UAAUH,SAAS,EAAE;EAC3C,IAAII,MAAM,GAAG,CAAC,CAAC;EAEf,CAACJ,SAAS,IAAI,EAAE,EAAE+B,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,UAAUC,UAAU,EAAE;IAClE,IAAIC,UAAU,GAAGD,UAAU,CAACF,KAAK,CAAC,GAAG,CAAC;IACtC,IAAII,GAAG,GAAGD,UAAU,CAACE,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACjD,IAAIhB,KAAK,GAAGY,UAAU,CAACX,IAAI,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC,CAAC;IACvC,IAAIjC,MAAM;IAEV,IAAI,CAAC+B,GAAG,EAAE;MACN;MACA;IACJ;IAEA,QAAQA,GAAG;MAEP,KAAK,SAAS;QACVb,KAAK,GAAG,IAAIT,IAAI,CAACS,KAAK,CAAC;QACvB;QACA,IAAIA,KAAK,CAACQ,QAAQ,CAAC,CAAC,KAAK,cAAc,EAAE;UACrC3B,MAAM,CAACS,OAAO,GAAGU,KAAK;QAC1B;QACA;MAEJ,KAAK,MAAM;QACPnB,MAAM,CAACM,IAAI,GAAGa,KAAK;QACnB;MAEJ,KAAK,QAAQ;QACTlB,MAAM,GAAGkB,KAAK,CAACgB,WAAW,CAAC,CAAC;QAC5B,IAAIlC,MAAM,CAACG,MAAM,IAAIH,MAAM,CAACmC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UAC3CnC,MAAM,GAAG,GAAG,GAAGA,MAAM,CAAC,CAAC;QAC3B;QACAD,MAAM,CAACC,MAAM,GAAGA,MAAM;QACtB;MAEJ,KAAK,SAAS;QACVD,MAAM,CAACS,OAAO,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAACC,MAAM,CAACO,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;QACnE;MAEJ,KAAK,QAAQ;QACTnB,MAAM,CAACqC,MAAM,GAAG,IAAI;QACpB;MAEJ,KAAK,UAAU;QACXrC,MAAM,CAACsC,QAAQ,GAAG,IAAI;QACtB;MAEJ;QACI,IAAI,CAACtC,MAAM,CAACkB,IAAI,EAAE;UACdlB,MAAM,CAACkB,IAAI,GAAGc,GAAG;UACjBhC,MAAM,CAACmB,KAAK,GAAGA,KAAK;QACxB;IACR;EACJ,CAAC,CAAC;EAEF,OAAOnB,MAAM;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,OAAO,CAACG,SAAS,CAAC+B,KAAK,GAAG,UAAUzB,MAAM,EAAEH,GAAG,EAAE;EAC7C,IAAIC,QAAQ,GAAGZ,MAAM,CAACa,KAAK,CAACF,GAAG,IAAI,EAAE,CAAC;;EAEtC;EACA;EACA,IAAIC,QAAQ,CAACK,QAAQ,KAAKH,MAAM,CAACC,MAAM,KAAKD,MAAM,CAACC,MAAM,CAACmC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,GAAGtC,QAAQ,CAACK,QAAQ,EAAEE,MAAM,CAAC,CAACL,MAAM,CAACC,MAAM,CAACG,MAAM,CAAC,KAAKJ,MAAM,CAACC,MAAM,CAAC,EAAE;IACvJ,OAAO,KAAK;EAChB;;EAEA;EACA,IAAIK,IAAI,GAAG,IAAI,CAACC,OAAO,CAACT,QAAQ,CAACU,QAAQ,CAAC;EAC1C,IAAIF,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEL,MAAM,CAACM,IAAI,CAACF,MAAM,CAAC,KAAKJ,MAAM,CAACM,IAAI,EAAE;IACpD,OAAO,KAAK;EAChB;;EAEA;EACA,IAAIN,MAAM,CAACqC,MAAM,IAAIvC,QAAQ,CAACyC,QAAQ,KAAK,QAAQ,EAAE;IACjD,OAAO,KAAK;EAChB;EAEA,OAAO,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAhD,OAAO,CAACG,SAAS,CAACoB,GAAG,GAAG,UAAUd,MAAM,EAAE;EACtC,IAAIsB,CAAC;EACL,IAAIkB,GAAG;;EAEP;EACA,IAAI,CAACxC,MAAM,IAAI,CAACA,MAAM,CAACkB,IAAI,EAAE;IACzB,OAAO,KAAK;EAChB;;EAEA;EACA,KAAKI,CAAC,GAAG,CAAC,EAAEkB,GAAG,GAAG,IAAI,CAAC/C,OAAO,CAACW,MAAM,EAAEkB,CAAC,GAAGkB,GAAG,EAAElB,CAAC,EAAE,EAAE;IACjD,IAAI,IAAI,CAACmB,OAAO,CAAC,IAAI,CAAChD,OAAO,CAAC6B,CAAC,CAAC,EAAEtB,MAAM,CAAC,EAAE;MAEvC;MACA,IAAI,IAAI,CAACuB,SAAS,CAACvB,MAAM,CAAC,EAAE;QACxB,IAAI,CAACP,OAAO,CAAC+B,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,OAAO,KAAK;MAChB;MAEA,IAAI,CAAC7B,OAAO,CAAC6B,CAAC,CAAC,GAAGtB,MAAM;MACxB,OAAO,IAAI;IACf;EACJ;;EAEA;EACA,IAAI,CAAC,IAAI,CAACuB,SAAS,CAACvB,MAAM,CAAC,EAAE;IACzB,IAAI,CAACP,OAAO,CAACiD,IAAI,CAAC1C,MAAM,CAAC;EAC7B;EAEA,OAAO,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,OAAO,CAACG,SAAS,CAAC+C,OAAO,GAAG,UAAUE,CAAC,EAAEC,CAAC,EAAE;EACxC,OAAOD,CAAC,CAACzB,IAAI,KAAK0B,CAAC,CAAC1B,IAAI,IAAIyB,CAAC,CAACrC,IAAI,KAAKsC,CAAC,CAACtC,IAAI,IAAIqC,CAAC,CAAC1C,MAAM,KAAK2C,CAAC,CAAC3C,MAAM,IAAI0C,CAAC,CAACN,MAAM,KAAKO,CAAC,CAACP,MAAM,IAAIM,CAAC,CAACL,QAAQ,KAAKK,CAAC,CAACL,QAAQ;AAChI,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA/C,OAAO,CAACG,SAAS,CAAC6B,SAAS,GAAG,UAAUvB,MAAM,EAAE;EAC5C,OAAQA,MAAM,CAACS,OAAO,IAAIT,MAAM,CAACS,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC,IAAK,CAACV,MAAM,CAACmB,KAAK;AAC3E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA5B,OAAO,CAACG,SAAS,CAACa,OAAO,GAAG,UAAUC,QAAQ,EAAE;EAC5C,IAAIF,IAAI,GAAG,CAACE,QAAQ,IAAI,GAAG,EAAEoB,KAAK,CAAC,GAAG,CAAC;EACvCtB,IAAI,CAACuC,GAAG,CAAC,CAAC,CAAC,CAAC;EACZvC,IAAI,GAAGA,IAAI,CAACc,IAAI,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC,CAAC;;EAE5B;EACA,IAAI5B,IAAI,CAAC8B,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACxB9B,IAAI,GAAG,GAAG,GAAGA,IAAI;EACrB;;EAEA;EACA,IAAIA,IAAI,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACzBC,IAAI,IAAI,GAAG;EACf;EAEA,OAAOA,IAAI;AACf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}